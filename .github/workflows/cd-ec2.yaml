name: Continuous Deployment

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/tracking-demos:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

name: CI/CD to EC2

on:
  push:
    branches: ["main"]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/accelerator-cd-demo:latest
      NAME: accelerator-cd-demo
      PORT: 8000

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ env.IMAGE }}

    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          set -e
          IMAGE="${{ env.IMAGE }}"
          NAME="${{ env.NAME }}"
          PORT="${{ env.PORT }}"

          # always pull the latest image
          docker pull "$IMAGE"

          # stop & remove existing container with the same name (if any)
          if [ "$(docker ps -aq -f name=^/${NAME}$)" ]; then
            docker rm -f "$NAME" || true
          fi

          # run fresh container
          docker run -d \
            --name "$NAME" \
            --restart unless-stopped \
            -p ${PORT}:${PORT} \
            "$IMAGE"
